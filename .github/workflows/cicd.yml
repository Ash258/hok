name: CICD
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
jobs:
  # Check code style
  check_cargo_style:
    name: Check Code Style
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[ci skip]')"
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Format Check
        run: cargo fmt -- --check

      - name: Clippy Check
        run: cargo clippy

  # Check tests
  check_cargo_test:
    name: Check Tests
    needs: check_cargo_style
    runs-on: windows-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Test Check
        run: cargo test --workspace

  # Check build
  check_cargo_build:
    name: Check Dev Build
    needs: check_cargo_test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
          - target: i686-pc-windows-msvc
          - target: aarch64-pc-windows-msvc
    runs-on: windows-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build Check
        run: cargo build --locked --target ${{ matrix.target }}

  # Create/Update release PR
  release_please:
    name: Release Please
    needs: check_cargo_build
    runs-on: ubuntu-latest
    if: github.repository == 'chawyehsu/hok' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust
          release-as: 0.1.0-alpha.2
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

  # Build artifacts
  github_build:
    name: Release Build
    needs: release_please
    if: ${{ needs.release_please.outputs.release_created == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hok-x86_64-pc-windows-msvc.zip

          - target: i686-pc-windows-msvc
            os: windows-latest
            name: hok-i686-pc-windows-msvc.zip

          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: hok-aarch64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --release --locked --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Strip artifacts [Linux]
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          case ${{ matrix.target }} in
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

          STRIP="strip"
          case ${{ matrix.target }} in
            aarch64-unknown-linux-gnu) STRIP="aarch64-linux-gnu-strip" ;;
          esac;
          "${STRIP}" target/${{ matrix.target }}/release/hok

      - name: Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} hok.exe
          cd -

      - name: Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} hok
          cd -

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  # Create GitHub release with Rust build targets and release notes
  upload_artifacts:
    name: Add Build Artifacts to Release
    needs: [release_please, github_build]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Artifacts
        uses: actions/download-artifact@v3

      - name: Prepare Checksums
        run: for file in hok-*/hok-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Publish Release
        run: gh release edit ${{ needs.release_please.outputs.tag_name }} --draft=false --repo=chawyehsu/hok
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          files: hok-*/hok-*
          tag_name: ${{ needs.release_please.outputs.tag_name }}
